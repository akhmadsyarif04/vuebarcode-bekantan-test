{"remainingRequest":"/srv/http/bekantan-vue-testing/node_modules/babel-loader/lib/index.js!/srv/http/bekantan-vue-testing/node_modules/vuetify-loader/lib/loader.js!/srv/http/bekantan-vue-testing/node_modules/cache-loader/dist/cjs.js??ref--0-0!/srv/http/bekantan-vue-testing/node_modules/vue-loader/lib/index.js??vue-loader-options!/srv/http/bekantan-vue-testing/src/views/Barcode-3.vue?vue&type=script&lang=js&","dependencies":[{"path":"/srv/http/bekantan-vue-testing/src/views/Barcode-3.vue","mtime":1559456495000},{"path":"/srv/http/bekantan-vue-testing/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/srv/http/bekantan-vue-testing/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/srv/http/bekantan-vue-testing/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/srv/http/bekantan-vue-testing/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/srv/http/bekantan-vue-testing/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/srv/http/bekantan-vue-testing/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es7.promise.finally\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Vue from \"vue\";\nimport VueQrcodeReader from \"vue-qrcode-reader\";\nVue.use(VueQrcodeReader);\nexport default {\n  data: function data() {\n    return {\n      result: '',\n      error: ''\n    };\n  },\n  methods: {\n    onDecode: function onDecode(result) {\n      this.result = result;\n    },\n    onInit: function () {\n      var _onInit = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(promise) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return promise;\n\n              case 3:\n                _context.next = 8;\n                break;\n\n              case 5:\n                _context.prev = 5;\n                _context.t0 = _context[\"catch\"](0);\n\n                if (_context.t0.name === 'NotAllowedError') {\n                  this.error = \"ERROR: you need to grant camera access permisson\";\n                } else if (_context.t0.name === 'NotFoundError') {\n                  this.error = \"ERROR: no camera on this device\";\n                } else if (_context.t0.name === 'NotSupportedError') {\n                  this.error = \"ERROR: secure context required (HTTPS, localhost)\";\n                } else if (_context.t0.name === 'NotReadableError') {\n                  this.error = \"ERROR: is the camera already in use?\";\n                } else if (_context.t0.name === 'OverconstrainedError') {\n                  this.error = \"ERROR: installed cameras are not suitable\";\n                } else if (_context.t0.name === 'StreamApiNotSupportedError') {\n                  this.error = \"ERROR: Stream API is not supported in this browser\";\n                }\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 5]]);\n      }));\n\n      function onInit(_x) {\n        return _onInit.apply(this, arguments);\n      }\n\n      return onInit;\n    }()\n  }\n};",{"version":3,"sources":["Barcode-3.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAWA,OAAA,GAAA,MAAA,KAAA;AACA,OAAA,eAAA,MAAA,mBAAA;AAEA,GAAA,CAAA,GAAA,CAAA,eAAA;AAGA,eAAA;AACA,EAAA,IADA,kBACA;AACA,WAAA;AACA,MAAA,MAAA,EAAA,EADA;AAEA,MAAA,KAAA,EAAA;AAFA,KAAA;AAIA,GANA;AAQA,EAAA,OAAA,EAAA;AACA,IAAA,QADA,oBACA,MADA,EACA;AACA,WAAA,MAAA,GAAA,MAAA;AACA,KAHA;AAKA,IAAA,MALA;AAAA;AAAA;AAAA,+CAKA,OALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAOA,OAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AASA,oBAAA,YAAA,IAAA,KAAA,iBAAA,EAAA;AACA,uBAAA,KAAA,GAAA,kDAAA;AACA,iBAFA,MAEA,IAAA,YAAA,IAAA,KAAA,eAAA,EAAA;AACA,uBAAA,KAAA,GAAA,iCAAA;AACA,iBAFA,MAEA,IAAA,YAAA,IAAA,KAAA,mBAAA,EAAA;AACA,uBAAA,KAAA,GAAA,mDAAA;AACA,iBAFA,MAEA,IAAA,YAAA,IAAA,KAAA,kBAAA,EAAA;AACA,uBAAA,KAAA,GAAA,sCAAA;AACA,iBAFA,MAEA,IAAA,YAAA,IAAA,KAAA,sBAAA,EAAA;AACA,uBAAA,KAAA,GAAA,2CAAA;AACA,iBAFA,MAEA,IAAA,YAAA,IAAA,KAAA,4BAAA,EAAA;AACA,uBAAA,KAAA,GAAA,oDAAA;AACA;;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AARA,CAAA","sourcesContent":["<template>\n  <div>\n    <p class=\"error\">{{ error }}</p>\n\n    <p class=\"decode-result\">Last result: <b>{{ result }}</b></p>\n\n    <qrcode-stream @decode=\"onDecode\" @init=\"onInit\" />\n  </div>\n</template>\n\n<script>\nimport Vue from \"vue\";\nimport VueQrcodeReader from \"vue-qrcode-reader\";\n\nVue.use(VueQrcodeReader);\n\n\nexport default {\n  data () {\n    return {\n      result: '',\n      error: ''\n    }\n  },\n\n  methods: {\n    onDecode (result) {\n      this.result = result\n    },\n\n    async onInit (promise) {\n      try {\n        await promise\n      } catch (error) {\n        if (error.name === 'NotAllowedError') {\n          this.error = \"ERROR: you need to grant camera access permisson\"\n        } else if (error.name === 'NotFoundError') {\n          this.error = \"ERROR: no camera on this device\"\n        } else if (error.name === 'NotSupportedError') {\n          this.error = \"ERROR: secure context required (HTTPS, localhost)\"\n        } else if (error.name === 'NotReadableError') {\n          this.error = \"ERROR: is the camera already in use?\"\n        } else if (error.name === 'OverconstrainedError') {\n          this.error = \"ERROR: installed cameras are not suitable\"\n        } else if (error.name === 'StreamApiNotSupportedError') {\n          this.error = \"ERROR: Stream API is not supported in this browser\"\n        }\n      }\n    }\n  }\n}\n\n</script>\n<style scoped>\n.error {\n  font-weight: bold;\n  color: red;\n}\n</style>\n"],"sourceRoot":"src/views"}]}