{"remainingRequest":"/srv/http/bekantan-vue-testing/node_modules/babel-loader/lib/index.js!/srv/http/bekantan-vue-testing/node_modules/vuetify-loader/lib/loader.js!/srv/http/bekantan-vue-testing/node_modules/cache-loader/dist/cjs.js??ref--0-0!/srv/http/bekantan-vue-testing/node_modules/vue-loader/lib/index.js??vue-loader-options!/srv/http/bekantan-vue-testing/node_modules/vue-quaggajs/src/Scanner.vue?vue&type=script&lang=js&","dependencies":[{"path":"/srv/http/bekantan-vue-testing/node_modules/vue-quaggajs/src/Scanner.vue","mtime":499162500000},{"path":"/srv/http/bekantan-vue-testing/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/srv/http/bekantan-vue-testing/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/srv/http/bekantan-vue-testing/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/srv/http/bekantan-vue-testing/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/srv/http/bekantan-vue-testing/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport _parseInt from \"/srv/http/bekantan-vue-testing/node_modules/@babel/runtime-corejs2/core-js/parse-int\";\n//\n//\n//\n//\n//\n//\n//\nimport Quagga from 'quagga';\nexport default {\n  name: 'QuaggaScanner',\n  props: {\n    onDetected: {\n      type: Function,\n      default: function _default(result) {\n        console.log('detected: ', result);\n      }\n    },\n    onProcessed: {\n      type: Function,\n      default: function _default(result) {\n        var drawingCtx = Quagga.canvas.ctx.overlay;\n        var drawingCanvas = Quagga.canvas.dom.overlay;\n\n        if (result) {\n          if (result.boxes) {\n            drawingCtx.clearRect(0, 0, _parseInt(drawingCanvas.getAttribute('width')), _parseInt(drawingCanvas.getAttribute('height')));\n            result.boxes.filter(function (box) {\n              return box !== result.box;\n            }).forEach(function (box) {\n              Quagga.ImageDebug.drawPath(box, {\n                x: 0,\n                y: 1\n              }, drawingCtx, {\n                color: 'green',\n                lineWidth: 2\n              });\n            });\n          }\n\n          if (result.box) {\n            Quagga.ImageDebug.drawPath(result.box, {\n              x: 0,\n              y: 1\n            }, drawingCtx, {\n              color: '#00F',\n              lineWidth: 2\n            });\n          }\n\n          if (result.codeResult && result.codeResult.code) {\n            Quagga.ImageDebug.drawPath(result.line, {\n              x: 'x',\n              y: 'y'\n            }, drawingCtx, {\n              color: 'red',\n              lineWidth: 3\n            });\n          }\n        }\n      }\n    },\n    readerTypes: {\n      type: Array,\n      default: function _default() {\n        return ['code_128_reader'];\n      }\n    },\n    readerSize: {\n      type: Object,\n      default: function _default() {\n        return {\n          width: 640,\n          height: 480\n        };\n      },\n      validator: function validator(o) {\n        return typeof o.width === 'number' && typeof o.height === 'number';\n      }\n    },\n    aspectRatio: {\n      type: Object,\n      default: function _default() {\n        return {\n          min: 1,\n          max: 2\n        };\n      },\n      validator: function validator(o) {\n        return typeof o.min === 'number' && typeof o.max === 'number';\n      }\n    }\n  },\n  data: function data() {\n    return {\n      quaggaState: {\n        inputStream: {\n          type: 'LiveStream',\n          constraints: {\n            width: {\n              min: this.readerSize.width\n            },\n            height: {\n              min: this.readerSize.height\n            },\n            facingMode: 'environment',\n            aspectRatio: {\n              min: 1,\n              max: 2\n            }\n          }\n        },\n        locator: {\n          patchSize: 'medium',\n          halfSample: true\n        },\n        numOfWorkers: 2,\n        frequency: 10,\n        decoder: {\n          readers: this.readerTypes\n        },\n        locate: true\n      }\n    };\n  },\n  mounted: function mounted() {\n    Quagga.init(this.quaggaState, function (err) {\n      if (err) {\n        return console.error(err);\n      }\n\n      Quagga.start();\n    });\n    Quagga.onDetected(this.onDetected);\n    Quagga.onProcessed(this.onProcessed);\n  },\n  destroyed: function destroyed() {\n    Quagga.stop();\n  }\n};",{"version":3,"sources":["Scanner.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"interactive\" class=\"viewport scanner\">\n    <video />\n    <canvas class=\"drawingBuffer\" />\n  </div>\n</template>\n\n<script>\nimport Quagga from 'quagga';\n\nexport default {\n  name: 'QuaggaScanner',\n  props: {\n    onDetected: {\n      type: Function,\n      default(result) {\n        console.log('detected: ', result);\n      },\n    },\n    onProcessed: {\n      type: Function,\n      default(result) {\n        let drawingCtx = Quagga.canvas.ctx.overlay;\n\n        let drawingCanvas = Quagga.canvas.dom.overlay;\n\n        if (result) {\n          if (result.boxes) {\n            drawingCtx.clearRect(\n              0,\n              0,\n              parseInt(drawingCanvas.getAttribute('width')),\n              parseInt(drawingCanvas.getAttribute('height'))\n            );\n            result.boxes\n              .filter(function(box) {\n                return box !== result.box;\n              })\n              .forEach(function(box) {\n                Quagga.ImageDebug.drawPath(box, { x: 0, y: 1 }, drawingCtx, {\n                  color: 'green',\n                  lineWidth: 2,\n                });\n              });\n          }\n          if (result.box) {\n            Quagga.ImageDebug.drawPath(result.box, { x: 0, y: 1 }, drawingCtx, {\n              color: '#00F',\n              lineWidth: 2,\n            });\n          }\n\n          if (result.codeResult && result.codeResult.code) {\n            Quagga.ImageDebug.drawPath(\n              result.line,\n              { x: 'x', y: 'y' },\n              drawingCtx,\n              { color: 'red', lineWidth: 3 }\n            );\n          }\n        }\n      },\n    },\n    readerTypes: {\n      type: Array,\n      default: () => ['code_128_reader'],\n    },\n    readerSize: {\n      type: Object,\n      default: () => ({\n        width: 640,\n        height: 480,\n      }),\n      validator: o =>\n        typeof o.width === 'number' && typeof o.height === 'number',\n    },\n    aspectRatio: {\n      type: Object,\n      default: () => ({\n        min: 1,\n        max: 2,\n      }),\n      validator: o => typeof o.min === 'number' && typeof o.max === 'number',\n    },\n  },\n  data: function() {\n    return {\n      quaggaState: {\n        inputStream: {\n          type: 'LiveStream',\n          constraints: {\n            width: { min: this.readerSize.width },\n            height: { min: this.readerSize.height },\n            facingMode: 'environment',\n            aspectRatio: { min: 1, max: 2 },\n          },\n        },\n        locator: {\n          patchSize: 'medium',\n          halfSample: true,\n        },\n        numOfWorkers: 2,\n        frequency: 10,\n        decoder: {\n          readers: this.readerTypes,\n        },\n        locate: true,\n      },\n    };\n  },\n  mounted: function() {\n    Quagga.init(this.quaggaState, function(err) {\n      if (err) {\n        return console.error(err);\n      }\n      Quagga.start();\n    });\n    Quagga.onDetected(this.onDetected);\n    Quagga.onProcessed(this.onProcessed);\n  },\n  destroyed: function() {\n    Quagga.stop();\n  },\n};\n</script>\n\n<style scoped>\n.viewport {\n  position: relative;\n}\n\n.viewport canvas,\n.viewport video {\n  position: absolute;\n  left: 0;\n  top: 0;\n}\n</style>\n"],"sourceRoot":"node_modules/vue-quaggajs/src"}]}